package com.example.atry.backend;


import android.util.Log;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;

/**
 * Service ƒë·ªÉ g·ªçi Gemini API v√† t·∫°o c√¢u h·ªèi Icebreaker.
 * L·ªõp n√†y ph·∫£i ƒë∆∞·ª£c g·ªçi trong m·ªôt Coroutine (v√≠ d·ª•: Dispatchers.IO)
 * t·ª´ Kotlin ViewModel v√¨ n√≥ th·ª±c hi·ªán t√°c v·ª• m·∫°ng.
 */
public class GeminiApiService {

    // üî• KH√îNG thay ƒë·ªïi gi√° tr·ªã n√†y. Canvas s·∫Ω t·ª± ƒë·ªông cung c·∫•p key.
    private final String apiKey = "AIzaSyCBAAF0wVYgn6IFKoX_NZuH4TWXIB6uJDA";
    private final String apiUrl = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-09-2025:generateContent?key=" + apiKey;

    /**
     * G·ªçi Gemini API ƒë·ªÉ sinh ra 3 c√¢u h·ªèi Icebreaker d·ª±a tr√™n s·ªü th√≠ch chung.
     * PH·∫¢I ƒë∆∞·ª£c g·ªçi tr√™n m·ªôt lu·ªìng n·ªÅn (background thread).
     * @param commonInterests S·ªü th√≠ch chung c·ªßa c·∫∑p ƒë√¥i (v√≠ d·ª•: "Du l·ªãch, n·∫•u ƒÉn").
     * @return Danh s√°ch c√°c c√¢u h·ªèi Icebreaker.
     */
    public List<String> generateIcebreakers(String commonInterests) {

        final String systemInstruction = "B·∫°n l√† chuy√™n gia h·∫πn h√≤. H√£y t·∫°o ra M·ªòT C√ÇU H·ªéI M·ªû ƒê·∫¶U (icebreaker) C·ª∞C K·ª≤ NG·∫ÆN v√† th√∫ v·ªã cho m·ªôt cu·ªôc h·∫πn h√≤ video. C√¢u h·ªèi ph·∫£i li√™n quan ƒë·∫øn s·ªü th√≠ch chung, th√¢n thi·ªán, v√† khuy·∫øn kh√≠ch t∆∞∆°ng t√°c ngay l·∫≠p t·ª©c. B·∫°n ph·∫£i tr·∫£ l·ªùi b·∫±ng ƒë·ªãnh d·∫°ng JSON.";
        final String userQuery = "H√£y g·ª£i √Ω 3 c√¢u h·ªèi Icebreaker cho m·ªôt c·∫∑p ƒë√¥i c√≥ s·ªü th√≠ch chung l√†: " + commonInterests + ". M·ªói c√¢u h·ªèi ph·∫£i n·∫±m trong m·ªôt ƒë·ªëi t∆∞·ª£ng ri√™ng bi·ªát.";

        // 1. X√¢y d·ª±ng Payload JSON
        JSONObject payload = buildPayload(systemInstruction, userQuery);

        HttpURLConnection connection = null;
        try {
            URL url = new URL(apiUrl);
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("POST");
            connection.setRequestProperty("Content-Type", "application/json");
            connection.setDoOutput(true);
            connection.setConnectTimeout(10000);
            connection.setReadTimeout(10000);

            // G·ª≠i Payload
            try (OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream())) {
                writer.write(payload.toString());
            }

            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                // X·ª≠ l√Ω Response
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()))) {
                    StringBuilder response = new StringBuilder();
                    String line;
                    while ((line = reader.readLine()) != null) {
                        response.append(line);
                    }
                    return parseResponse(response.toString());
                }
            } else {
                try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getErrorStream()))) {
                    String errorStream = reader.readLine();
                    Log.e("GeminiApi", "L·ªói API, m√£: " + responseCode + ". Chi ti·∫øt: " + errorStream);
                }
                return new ArrayList<>();
            }
        } catch (Exception e) {
            Log.e("GeminiApi", "L·ªói k·∫øt n·ªëi Gemini API: " + e.getMessage());
            return new ArrayList<>();
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }

    private JSONObject buildPayload(String systemInstruction, String userQuery) {
        try {
            JSONObject systemPart = new JSONObject().put("text", systemInstruction);
            JSONArray systemParts = new JSONArray().put(systemPart);
            JSONObject systemInstructionJson = new JSONObject().put("parts", systemParts);

            JSONObject userPart = new JSONObject().put("text", userQuery);
            JSONArray userParts = new JSONArray().put(userPart);
            JSONObject contents = new JSONObject().put("parts", userParts);

            // Response Schema (ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·∫ßu ra l√† JSON Array ch·ª©a c√°c Object c√≥ field 'question')
            JSONObject questionProp = new JSONObject().put("type", "STRING");
            JSONObject properties = new JSONObject().put("question", questionProp);
            JSONArray propertyOrdering = new JSONArray().put("question");
            JSONObject itemSchema = new JSONObject()
                    .put("type", "OBJECT")
                    .put("properties", properties)
                    .put("propertyOrdering", propertyOrdering);

            JSONObject responseSchema = new JSONObject()
                    .put("type", "ARRAY")
                    .put("items", itemSchema);

            JSONObject generationConfig = new JSONObject()
                    .put("responseMimeType", "application/json")
                    .put("responseSchema", responseSchema);

            return new JSONObject()
                    .put("systemInstruction", systemInstructionJson)
                    .put("contents", new JSONArray().put(contents))
                    .put("generationConfig", generationConfig);

        } catch (Exception e) {
            Log.e("GeminiApi", "L·ªói x√¢y d·ª±ng Payload JSON: " + e.getMessage());
            return new JSONObject();
        }
    }

    private List<String> parseResponse(String responseString) {
        List<String> questions = new ArrayList<>();
        try {
            JSONObject responseJson = new JSONObject(responseString);

            // Tr√≠ch xu·∫•t n·ªôi dung text (ƒë√£ l√† JSON String) t·ª´ candidate
            String textPart = responseJson
                    .getJSONArray("candidates")
                    .getJSONObject(0)
                    .getJSONObject("content")
                    .getJSONArray("parts")
                    .getJSONObject(0)
                    .getString("text");

            // Parse JSON array ch·ª©a c√¢u h·ªèi
            JSONArray jsonArray = new JSONArray(textPart);
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject questionObject = jsonArray.getJSONObject(i);
                questions.add(questionObject.getString("question"));
            }
        } catch (Exception e) {
            Log.e("GeminiApi", "L·ªói ph√¢n t√≠ch c√∫ ph√°p JSON: " + e.getMessage());
        }
        return questions;
    }
}
