package com.example.atry.viewmodel.functional

import android.util.Log
import androidx.compose.runtime.mutableStateListOf
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.atry.backend.AiService.FastAPI
import com.example.atry.backend.MatchedUser
import com.example.atry.backend.MessageService
import com.example.atry.backend.Message
import com.example.atry.backend.UserService
import com.google.firebase.firestore.DocumentSnapshot
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.flow.update
import kotlinx.coroutines.launch


// B∆Ø·ªöC 1: S·ª≠ d·ª•ng StateFlow ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i UI c√≥ th·ªÉ theo d√µi
data class ChatUiState(
    val isLoading: Boolean = false,
    val errorMessage: String? = null,
    val matchedUser: MatchedUser? = null
)

class ChatViewModel(
    savedStateHandle: SavedStateHandle,
    private val messageService: MessageService ,
    private val userService: UserService,
    private val matchedUser: MatchedUser
) : ViewModel() {

    private val matchId = matchedUser.matchId
    private val _uiState = MutableStateFlow(ChatUiState(isLoading = true))
    val uiState: StateFlow<ChatUiState> = _uiState.asStateFlow()


    // Danh s√°ch tin nh·∫Øn observable (d√πng cho Compose LazyColumn)
    val messages = mutableStateListOf<Message>()

    private var lastDoc: DocumentSnapshot? = null

    init {
        // Lu√¥n g·ªçi trong Coroutine Scope
        viewModelScope.launch {
            loadMatchedUser()
            loadInitialMessages()
            listenNewMessages()
        }
    }
    private fun loadMatchedUser() {
        _uiState.update {
            it.copy(matchedUser = matchedUser)
        }    }
    private fun loadInitialMessages() {
        messageService.getInitialMessages(matchId, object : MessageService.LoadMessagesCallback {
            override fun onSuccess(messagesList: List<Message>) {
                messages.addAll(messagesList)

                _uiState.update { it.copy(isLoading = false, errorMessage = null) }
            }

            override fun onError(e: Exception) {
                _uiState.update {
                    it.copy(
                        errorMessage = e.message,
                        isLoading = false
                    )
                }
                Log.d("ChatViewModel", e.message.toString())

            }
        })
    }

    private fun listenNewMessages() {
        // Listener kh√¥ng c·∫ßn lastDoc v√† kh√¥ng b·∫≠t loading
        messageService.listenForLastMessage(matchId, object : MessageService.LastMessageListener {
            override fun onLastMessageReceived(lastMessage: Message) {
                val messageExists = messages.any { it.messageId == lastMessage.messageId }

                if (!messageExists) {
                    // Th√™m v√†o n·∫øu ƒë√¢y l√† tin nh·∫Øn ho√†n to√†n m·ªõi
                    messages.add(lastMessage)
                }
            }
        })
    }

    fun loadMoreMessages(limit: Int = 20) {
        // üî• PH√ÇN TRANG B·ªä V√î HI·ªÜU H√ìA:
        // Ch√∫ng ta kh√¥ng c√≥ lastDoc v√† kh√¥ng c√≥ h√†m ƒë·ªÉ t·∫£i th√™m tin nh·∫Øn.
        _uiState.value = _uiState.value.copy(errorMessage = "Kh√¥ng th·ªÉ t·∫£i th√™m tin nh·∫Øn do c·∫•u tr√∫c backend kh√¥ng h·ªó tr·ª£ ph√¢n trang.", isLoading = false)
        // D·ª´ng t·∫°i ƒë√¢y
        return
    }


    override fun onCleared() {
        super.onCleared()
        messageService.cleanup()
    }




}